// ConsoleApplication.cpp: 主项目文件。

#include "stdafx.h"
#include<stdio.h>
#include<malloc.h>  
#include<string.h> 
#include<math.h>
#include<stdlib.h>
#include<iostream>  
#include <windows.h> 

using namespace std;
using namespace System;
using namespace System::Drawing;


/*彩色表*/
typedef struct RGB_QUAD
{
	int rgbBlue;         /*  蓝色强度  */
	int rgbGreen;        /*  绿色强度  */
	int rgbRed;          /*  红色强度  */
	int rgbReversed;     /*  保留值    */
} RGBQUADS, *imagergb;
imagergb rgb, rgbregister, backgroundrgb;
int countwidthditance[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int countheightditance[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
void outputrgb(imagergb p, int width)
{
	cout << (p - width * 2)->rgbBlue << " " << (p - width * 2)->rgbGreen << " " << (p - width * 2)->rgbRed << "     ";
	cout << (p - width)->rgbBlue << " " << (p - width)->rgbGreen << " " << (p - width)->rgbRed << "     ";
	cout << p->rgbBlue << " " << p->rgbGreen << " " << p->rgbRed << "     ";
	cout << (p + width)->rgbBlue << " " << (p + width)->rgbGreen << " " << (p + width)->rgbRed << "     ";
	cout << (p + width * 2)->rgbBlue << " " << (p + width * 2)->rgbGreen << " " << (p + width * 2)->rgbRed << endl;

}
void discardframe(int width, int height)
{
	int i, j;
	imagergb p, q;
	for (i = 0, p = rgb; i < width; i++, p++)
	{
		p->rgbBlue = 0;
		p->rgbGreen = 0;
		p->rgbRed = 0;
		(p + (height - 1)*width)->rgbBlue = 0;
		(p + (height - 1)*width)->rgbGreen = 0;
		(p + (height - 1)*width)->rgbRed = 0;
	}
	for (j = 0, q = rgb; j <height; j++, q = q + width)
	{
		q->rgbBlue = 0;
		q->rgbGreen = 0;
		q->rgbRed = 0;
		(q + width - 1)->rgbBlue = 0;
		(q + width - 1)->rgbGreen = 0;
		(q + width - 1)->rgbRed = 0;
	}
}
void discardwidthnoise(int width, int height)
{
	int i, j, k, minwidthditance = 1, ditance, maxone, maxtwo, leftture = 0, numone, numtwo, numthree, numfour;
	imagergb p, q;
	maxone = 0;
	for (i = 1; i < 10; i++)
	{
		if (countwidthditance[i] >countwidthditance[maxone])
		{
			maxone = i;
		}
	}
	if (maxone != 0)
		maxtwo = 0;
	else
		maxtwo = 1;
	for (i = 1; i<10; i++)
	{
		if (countwidthditance[i] >countwidthditance[maxtwo] && i != maxone)
		{
			maxtwo = i;
		}
	}
	if ((maxone - maxtwo>1 && maxtwo > 4) || (maxtwo - maxone>1 && maxtwo <= 4) && countwidthditance[maxtwo]>10)
		maxone = maxtwo;
	for (i = maxone;;)
	{
		if (i > 0)
		{
			if (countwidthditance[i] > countwidthditance[i - 1] - 5)
				i--;
			else
				break;
		}
		if (i == 0)
		{
			leftture = 1;
			break;
		}

	}
	if (maxone == 0 && countwidthditance[maxone]>50)
	{
		minwidthditance = 2;
	}
	else if (maxone == 0 && countwidthditance[maxone] <= 50)
	{
		minwidthditance = 1;
	}
	else if (maxone>0 && leftture == 1)
	{
		if (countwidthditance[0]>30 && maxone<3)
			minwidthditance = maxone + 2;//暂时这样处理
		else
			minwidthditance = 1;
	}
	else if (maxone>0 && leftture == 0)
	{
		for (i = 0;; i++)
		{
			numone = countwidthditance[i] - countwidthditance[i + 1];
			numtwo = countwidthditance[i + 1] - countwidthditance[i + 2];
			if (numone>10 || (numone>0 && numtwo>0))
			{
				for (j = i + 1;; j++)
				{
					numthree = countwidthditance[j + 1] - countwidthditance[j];
					numfour = countwidthditance[j + 2] - countwidthditance[j + 1];
					if (numthree > 10 || (numthree > 0 && numfour > 0))
					{
						if (countwidthditance[j] >= 5)
							minwidthditance = j + 1;
						else
							minwidthditance = j + 2;
						break;
					}
				}
				break;
			}
		}
	}
	for (i = 1; i < height - 1; i++)
	{
		for (p = rgb + width*i, j = 0; j <width - 2; p++, j++)
		{
			ditance = 0;
			if (p->rgbBlue == 0 && (p + 1)->rgbBlue == 255)
			{
				ditance = 1;
				for (q = p + 1, k = 0;; k++, q++)
				{
					if (ditance>0 && q->rgbBlue == 255 && (q + 1)->rgbBlue == 0)
						break;
					if (q->rgbBlue == 255 && (q + 1)->rgbBlue == 255)
						ditance++;
				}
			}
			if (ditance <  minwidthditance && ditance != 0)
			{
				for (p = p + 1, j = j + 1, k = 0; k < ditance; k++, j++, p++)
				{
					p->rgbBlue = 0;
					p->rgbGreen = 0;
					p->rgbRed = 0;
				}
				j--;
				p--;
			}
			else if (ditance >= minwidthditance && ditance != 0)
			{
				p = p + ditance;
				j = j + ditance;
			}
		}
	}

}
void discardheightnoise(int width, int height)
{
	int i, j, k, minheightditance = 1, ditance, maxone, maxtwo, leftture = 0, numone, numtwo, numthree, numfour;
	imagergb p, q;
	maxone = 0;
	for (i = 1; i < 10; i++)
	{
		if (countheightditance[i] >countheightditance[maxone])
		{
			maxone = i;
		}
	}
	if (maxone != 0)
		maxtwo = 0;
	else
		maxtwo = 1;
	for (i = 1; i<10; i++)
	{
		if (countheightditance[i] >countheightditance[maxtwo] && i != maxone)
		{
			maxtwo = i;
		}
	}
	if ((maxone - maxtwo>1 && maxtwo > 4) || (maxtwo - maxone>1 && maxtwo <= 4) && countwidthditance[maxtwo]>10)
		maxone = maxtwo;
	for (i = maxone;;)
	{
		if (i > 0)
		{
			if (countheightditance[i] > countheightditance[i - 1] - 5)
				i--;
			else
				break;
		}
		if (i == 0)
		{
			leftture = 1;
			break;
		}

	}
	if (maxone == 0 && countheightditance[maxone]>50)
	{
		minheightditance = 2;
	}
	else if (maxone == 0 && countheightditance[maxone] <= 50)
	{
		minheightditance = 1;
	}
	else if (maxone>0 && leftture == 1)
	{
		if (countheightditance[0]>30 && maxone<3)
			minheightditance = maxone + 2;//暂时这样处理
		else if (countheightditance[0]>10 && countheightditance[0]<=30)
			minheightditance = 2;//暂时这样处理
		else
			minheightditance = 1;
	}
	else if (maxone>0 && leftture == 0)
	{
		for (i = 0;; i++)
		{
			numone = countheightditance[i] - countheightditance[i + 1];
			numtwo = countheightditance[i + 1] - countheightditance[i + 2];
			if (numone>10 || (numone>0 && numtwo>0))
			{
				for (j = i + 1;; j++)
				{
					numthree = countheightditance[j + 1] - countheightditance[j];
					numfour = countheightditance[j + 2] - countheightditance[j + 1];
					if (numthree > 10 || (numthree > 0 && numfour > 0))
					{
						if (countheightditance[j] >= 5)
							minheightditance = j + 1;
						else
							minheightditance = j + 2;
						break;
					}
				}
				break;
			}
		}
	}
	for (i = 0; i < width - 2; i++)
	{
		for (j = 0, p = rgb + i; j<height - 1; p = p + width, j++)
		{
			ditance = 0;
			if (p->rgbBlue == 0 && (p + width)->rgbBlue == 255)
			{
				ditance = 1;
				for (q = p + width, k = 0;; k++, q = q + width)
				{
					if (ditance>0 && q->rgbBlue == 255 && (q + width)->rgbBlue == 0)
						break;
					if (q->rgbBlue == 255 && (q + width)->rgbBlue == 255)
						ditance++;
				}
			}
			if (ditance < minheightditance && ditance != 0)
			{
				for (p = p + width, j = j + 1, k = 0; k < ditance; k++, j++, p = p + width)
				{
					p->rgbBlue = 0;
					p->rgbGreen = 0;
					p->rgbRed = 0;
				}
				j--;
				p = p - width;
			}
			else if (ditance >= minheightditance && ditance != 0)
			{
				p = p + width*ditance;
				j = j + ditance;
			}
		}
	}
}
int countnoisespots(int width, int height)
{
	int i, j, allblackline = 0;
	imagergb p;
	for (i = 1; i < width - 1; i++)
	{
		for (j = 0, p = rgb + i; j <height - 2; p = p + width, j++)
		{
			if (p->rgbBlue == 255)
				break;
		}
		if (j == height - 2)
			allblackline++;
	}
	return allblackline;
}
int counttworgb(imagergb p, imagergb q)
{

	int rgbspot, rgbrgbBluespot, rgbrgbGreenspot, rgbrgbRedspot;
	rgbrgbBluespot = p->rgbBlue - ((q)->rgbBlue);
	rgbrgbGreenspot = p->rgbGreen - ((q)->rgbGreen);
	rgbrgbRedspot = p->rgbRed - ((q)->rgbRed);
	if (rgbrgbBluespot < 0)
		rgbrgbBluespot = -rgbrgbBluespot;
	if (rgbrgbGreenspot < 0)
		rgbrgbGreenspot = -rgbrgbGreenspot;
	if (rgbrgbRedspot < 0)
		rgbrgbRedspot = -rgbrgbRedspot;
	rgbspot = rgbrgbBluespot + rgbrgbGreenspot + rgbrgbRedspot;
	return rgbspot;
}
int judgeaddrgbspot(imagergb p, imagergb q, int width, int thresholdvalueone, int thresholdvaluetwo, int cimagespot, imagergb backgroundrgb)
{
	int i, j, numone, numtwo, numthree, numfour, numfive, numsix, numseven, numeight, numnight, numten, numelven, countnum, selectmethod = 0;
	int frontture[5] = { 0, 0, 0, 0, 0 }, backture[5] = { 0, 0, 0, 0, 0 };
	imagergb k, r, s, frontrgb[5], backrgb[5];
	for (i = 0; i < 5; i++)
	{
		countnum = 0;
		for (k = p + (i - 2)*width - 3; k< q + (i - 2)*width + 3; k++)
		{
			numone = counttworgb(k, k + 1);
			if (countnum >= 2 && numone>thresholdvalueone)
			{
				numtwo = counttworgb(q, k);
				if (numtwo <thresholdvaluetwo)
				{
					backture[i] = 1;
					backrgb[i] = k;
				}
				break;
			}
			if (countnum>0)
			{
				if (counttworgb(k, k + 1)<thresholdvaluetwo)
					countnum++;
				else
					break;
			}
			if (countnum == 0 && numone>thresholdvalueone)
			{
				numtwo = counttworgb(p + 1, k + 1);
				if (numtwo < thresholdvaluetwo)
				{
					frontture[i] = 1;
					frontrgb[i] = k;
					countnum = 1;
				}
			}

		}
	}
	for (i = 0; i < 3; i++)
	{
		numseven = frontture[i] + frontture[i + 1];
		numeight = backture[i] + backture[i + 1];
		if (numseven == 2 && numeight == 2)
		{
			numnight = backrgb[i] - frontrgb[i];
			numten = backrgb[i + 1] - frontrgb[i + 1];
			numelven = backrgb[i + 1] - width - backrgb[i];
			if (numelven<0)
				numelven = -numelven;
			if (numnight>9 && numten > 9 && numelven < 3)
			{
				selectmethod = 1;
				break;
			}
		}
		numthree = frontture[i] + frontture[i + 1] + frontture[i + 2];
		numfour = backture[i] + backture[i + 1] + backture[i + 2];
		if (numthree == 3 && numfour == 3)
		{
			for (j = i; j < i + 2; j++)
			{
				numfive = (frontrgb[j] + width) - backrgb[j + 1];
				numsix = frontrgb[j + 1] - (backrgb[j] + width);
				if (numfive >= 1 || numsix >= 1)
					break;
			}
			if (j == i + 2)
			{
				selectmethod = 2;
			}
			break;
		}
	}
	if (i < 3 && selectmethod != 0 && p == frontrgb[2])
	{
		k = rgbregister + cimagespot;
		if (cimagespot == 0)
		{
			k->rgbBlue = (frontrgb[i] + 1)->rgbBlue;
			k->rgbGreen = (frontrgb[i] + 1)->rgbGreen;
			k->rgbRed = (frontrgb[i] + 1)->rgbRed;
			cout << k->rgbBlue << "   " << k->rgbGreen << "   " << k->rgbRed << endl;
			k++;
			cimagespot++;
		}
		if (cimagespot != 0)
		{
			for (j = i; j < i + selectmethod + 1; j++)
			{
				for (r = frontrgb[j] + 1; r < backrgb[j] + 1; r++)
				{
					for (s = k - 1;; s--)
					{
						if (s == rgbregister && (counttworgb(r, s)) >= 30 && (counttworgb(r, backgroundrgb))>thresholdvalueone)
						{
							k->rgbBlue = r->rgbBlue;
							k->rgbGreen = r->rgbGreen;
							k->rgbRed = r->rgbRed;
							cout << k->rgbBlue << "   " << k->rgbGreen << "   " << k->rgbRed << endl;
							k++;
							cimagespot++;
							break;
						}
						if ((counttworgb(r, s)) < 30)
							break;
					}
				}
			}
		}
	}
	return cimagespot;
}
int choosergbspot(int beginheight, int width, int cimagespot, int thresholdvalueone)
{
	int num, countnum, i, cnumberone, thresholdvaluetwo;
	imagergb  p, q;
	cnumberone = 0;
	for (i = 0, p = rgb + beginheight*width + 1, q = rgbregister + cimagespot; i<width - 3; p++, i++)
	{
		//outputrgb(p, width);
		num = counttworgb(p, p + 1);
		if ((cnumberone >= 2) && (num>thresholdvalueone))
		{
			cimagespot = judgeaddrgbspot(p - cnumberone, p, width, thresholdvalueone, thresholdvaluetwo, cimagespot, backgroundrgb);
			cnumberone = 0;
			p = p++;
			i++;
			//outputrgb(p, width);
		}
		if (cnumberone != 0)
		{
			if (num>thresholdvaluetwo)
				cnumberone = 0;
			else
				cnumberone++;
		}
		num = counttworgb(p, p + 1);
		countnum = counttworgb(p + 1, backgroundrgb);
		if ((cnumberone == 0) && (num > thresholdvalueone) && (countnum > thresholdvalueone))
		{
			cnumberone = 1;
			thresholdvaluetwo = num - 60;
			if (thresholdvaluetwo > 200)
				thresholdvaluetwo = 200;
		}
	}
	return cimagespot;
}
void countcodewidth(int width, int height)
{
	int i, j, ditance;
	imagergb p;
	ditance = 0;
	for (i = 1; i < height - 1; i++)
	{
		for (p = rgb + width*i, j = 0; j <width - 2; p++, j++)
		{
			if (ditance>0 && p->rgbBlue == 255 && (p + 1)->rgbBlue == 0)
			{
				if (ditance <= 10)
				{
					countwidthditance[ditance - 1]++;
				}
				ditance = 0;
				p++;
				j++;
			}
			if (ditance>0 && p->rgbBlue == 255 && (p + 1)->rgbBlue == 255)
				ditance++;
			if (ditance == 0 && p->rgbBlue == 0 && (p + 1)->rgbBlue == 255)
				ditance = 1;
		}
	}

}
void countcodeheight(int width, int height)
{
	int i, j, ditance;
	imagergb p;
	ditance = 0;
	for (i = 1; i < width - 1; i++)
	{
		for (p = rgb + i, j = 0; j <height - 2; p = p + width, j++)
		{
			if (ditance>0 && p->rgbBlue == 255 && (p + width)->rgbBlue == 0)
			{
				if (ditance <= 10)
				{
					countheightditance[ditance - 1]++;
				}
				ditance = 0;
				p = p + width;
				j++;
			}
			if (ditance>0 && p->rgbBlue == 255 && (p + width)->rgbBlue == 255)
				ditance++;
			if (ditance == 0 && p->rgbBlue == 0 && (p + width)->rgbBlue == 255)
				ditance = 1;
		}
	}
}
void pretreatmentimage()
{
	imagergb  p, q;
	int  countnum, beginheight, overheight, cimagespot = 0, thresholdvalueone, shrinkrgb = 1;
	int intervalquantity[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	int i, j, k;

	Bitmap^ originalbm = gcnew Bitmap("13.bmp");

	int width = originalbm->Width;
	int height = originalbm->Height;
	if (width >= 200)
	{
		shrinkrgb = 1;
		width = width / shrinkrgb;
		height = height / shrinkrgb;
	}
	Bitmap^ modifybm = gcnew Bitmap(width, height);
	rgb = (imagergb)malloc((width *height)*sizeof(RGBQUADS));
	backgroundrgb = (imagergb)malloc((1)*sizeof(RGBQUADS));
	for (i = 0, p = rgb; i <height*shrinkrgb; i = i + shrinkrgb)
	{
		for (j = 0; j < width*shrinkrgb; j = j + shrinkrgb, p++)
		{
			Color c = originalbm->GetPixel(j, i);
			p->rgbBlue = c.B;
			p->rgbGreen = c.G;
			p->rgbRed = c.R;
		}
	}
	for (i = 0, p = rgb + width; i < width - 3; p++, i++)
	{
		countnum = counttworgb(p, p + 1) + counttworgb(p + 1, p + 2) + counttworgb(p + 2, p + 3);
		if (countnum < 100)
		{
			backgroundrgb->rgbBlue = (p + 1)->rgbBlue;
			backgroundrgb->rgbGreen = (p + 1)->rgbGreen;
			backgroundrgb->rgbRed = (p + 1)->rgbRed;
			break;
		}
	}
	beginheight = height / 12;
	overheight = height * 9 / 10;
	for (i = beginheight; i <= overheight; i++)
	{
		for (j = 0, p = rgb + i * width + 1; j < width - 3; p++, j++)
		{
			for (k = 0; k<30; k++)
			{
				if (counttworgb(p, p + 1) <= (120 + k * 20) && counttworgb(p, p + 1) >(100 + k * 20))
					intervalquantity[k]++;
			}
		}
	}
	for (i = 0; i < 29; i++)
	{
		if (intervalquantity[i] - intervalquantity[i + 1]<0)
		{
			if ((width>100) || (width <= 100 && intervalquantity[i] < 20))
			{
				thresholdvalueone = 100 + i * 20;
				break;
			}
		}
	}
	rgbregister = (imagergb)malloc((200)*sizeof(RGBQUADS));
	for (i = beginheight; i <= overheight; i = i + 2)
	{
		cimagespot = choosergbspot(i, width, cimagespot, thresholdvalueone);
	}
	for (p = rgb, i = 0; i < width*height; p++, i++)
	{
		for (q = rgbregister, j = 0; j < cimagespot; q++, j++)
		{
			if ((counttworgb(p, q)) <= 50)
			{
				p->rgbBlue = 255;
				p->rgbGreen = 255;
				p->rgbRed = 255;
				break;
			}
		}
		if ((cimagespot == j) && ((counttworgb(p, q - 1)) > 50))
		{
			p->rgbBlue = 0;
			p->rgbGreen = 0;
			p->rgbRed = 0;
		}
	}
	discardframe(width, height);
	countcodewidth(width, height);
	discardwidthnoise(width, height);
	countcodeheight(width, height);
	discardheightnoise(width, height);
	discardwidthnoise(width, height);
	for (i = 0; i <height; i++)
	{
		for (j = 0, p = rgb + i*width; j < width; j++, p++)
		{
			modifybm->SetPixel(j, i, Color::FromArgb(p->rgbRed, p->rgbGreen, p->rgbBlue));
		}
	}
	modifybm->Save("处理图.bmp");
}
int main()
{
	pretreatmentimage();
	//system("pause");
	return 0;
}

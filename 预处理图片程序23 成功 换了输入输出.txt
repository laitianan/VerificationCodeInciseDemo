// ConsoleApplication.cpp: 主项目文件。

#include "stdafx.h"
#include<stdio.h>
#include<malloc.h>  
#include<string.h> 
#include<math.h>
#include<stdlib.h>
#include<iostream>  
#include <windows.h> 

using namespace std;
using namespace System;
using namespace System::Drawing;


/*彩色表*/
typedef struct RGB_QUAD
{
	int rgbBlue;         /*  蓝色强度  */
	int rgbGreen;        /*  绿色强度  */
	int rgbRed;          /*  红色强度  */
	int rgbReversed;     /*  保留值    */
} RGBQUADS, *imagergb;
imagergb rgb, rgbregister, backgroundrgb;
int countditance[20] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
void outputrgb(imagergb p, int width)
{
	cout << (p - width * 2)->rgbBlue << " " << (p - width * 2)->rgbGreen << " " << (p - width * 2)->rgbRed << "     ";
	cout << (p - width)->rgbBlue << " " << (p - width)->rgbGreen << " " << (p - width)->rgbRed << "     ";
	cout << p->rgbBlue << " " << p->rgbGreen << " " << p->rgbRed << "     ";
	cout << (p + width)->rgbBlue << " " << (p + width)->rgbGreen << " " << (p + width)->rgbRed << "     ";
	cout << (p + width * 2)->rgbBlue << " " << (p + width * 2)->rgbGreen << " " << (p + width * 2)->rgbRed << endl;

}
void discardframe(int width, int height)
{
	int i, j;
	imagergb p, q;
	for (i = 0, p = rgb; i < width; i++, p++)
	{
		p->rgbBlue = 0;
		p->rgbGreen = 0;
		p->rgbRed = 0;
		(p + (height - 1)*width)->rgbBlue = 0;
		(p + (height - 1)*width)->rgbGreen = 0;
		(p + (height - 1)*width)->rgbRed = 0;
	}
	for (j = 0, q = rgb; j <height; j++, q = q + width)
	{
		q->rgbBlue = 0;
		q->rgbGreen = 0;
		q->rgbRed = 0;
		(q + width - 1)->rgbBlue = 0;
		(q + width - 1)->rgbGreen = 0;
		(q + width - 1)->rgbRed = 0;
	}
}
void discardnoise(int width, int height)
{
	int i, j, k, minditance, ditance;
	imagergb p, q;
	for (i = 0; i < 20; i++)
	{
		if (countditance[i] >= 10)
		{
			minditance = i;
			break;
		}
	}
	for (i = 1; i < height - 1; i++)
	{
		for (p = rgb + width*i, j = 0; j <width - 2; p++, j++)
		{
			ditance = 0;
			if (p->rgbBlue == 0 && (p + 1)->rgbBlue == 255)
			{
				ditance = 1;
				for (q = p + 1, k = 0;; k++, q++)
				{
					if (ditance>0 && q->rgbBlue == 255 && (q + 1)->rgbBlue == 0)
						break;
					if (q->rgbBlue == 255 && (q + 1)->rgbBlue == 255)
						ditance++;
				}
			}
			if (ditance < minditance && ditance != 0)
			{
				for (p = p + 1, j = j + 1, k = 0; k < ditance; k++, j++, p++)
				{
					p->rgbBlue = 0;
					p->rgbGreen = 0;
					p->rgbRed = 0;
				}
				j--;
				p--;
			}
			else if (ditance >= minditance && ditance != 0)
			{
				p = p + ditance;
				j = j + ditance;
			}
		}
	}
	/*for (i = 0; i < width - 2; i++)
	{
	for (j = 0, p = rgb + i; j<height - 1; p = p + width, j++)
	{
	ditance = 0;
	if (p->rgbBlue == 0 && (p + width)->rgbBlue == 255)
	{
	ditance = 1;
	for (q = p + width, k = 0; ; k++, q = q + width)
	{
	if (ditance>0 && q->rgbBlue == 255 && (q + width)->rgbBlue == 0)
	break;
	if (q->rgbBlue == 255 && (q + width)->rgbBlue == 255)
	ditance++;
	}
	}
	if (ditance < minditance && ditance != 0)
	{
	for (p = p + width,j=j+1, k = 0; k < ditance; k++, j++, p = p + width)
	{
	p->rgbBlue = 0;
	p->rgbGreen = 0;
	p->rgbRed = 0;
	}
	j--;
	p = p - width;
	}
	else if (ditance >= minditance && ditance != 0)
	{
	p = p + width*ditance;
	j = j + ditance;
	}
	}
	}*/
}
int countnoisespots(int width, int height)
{
	int i, j, allblackline = 0;
	imagergb p;
	for (i = 1; i < width - 1; i++)
	{
		for (j = 0, p = rgb + i; j <height - 2; p = p + width, j++)
		{
			if (p->rgbBlue == 255)
				break;
		}
		if (j == height - 2)
			allblackline++;
	}
	return allblackline;
}
int counttworgb(imagergb p, imagergb q)
{

	int rgbspot, rgbrgbBluespot, rgbrgbGreenspot, rgbrgbRedspot;
	rgbrgbBluespot = p->rgbBlue - ((q)->rgbBlue);
	rgbrgbGreenspot = p->rgbGreen - ((q)->rgbGreen);
	rgbrgbRedspot = p->rgbRed - ((q)->rgbRed);
	if (rgbrgbBluespot < 0)
		rgbrgbBluespot = -rgbrgbBluespot;
	if (rgbrgbGreenspot < 0)
		rgbrgbGreenspot = -rgbrgbGreenspot;
	if (rgbrgbRedspot < 0)
		rgbrgbRedspot = -rgbrgbRedspot;
	rgbspot = rgbrgbBluespot + rgbrgbGreenspot + rgbrgbRedspot;
	return rgbspot;
}
int judgeaddrgbspot(imagergb p, imagergb q, int width, int thresholdvalue, int cimagespot)
{
	int i, j, numone, numtwo, numthree, numfour, numfive, numsix, cotinuous = 1, countnum;
	int frontture[5] = { 0, 0, 0, 0, 0 }, backture[5] = { 0, 0, 0, 0, 0 };
	imagergb k, r, s, frontrgb[5], backrgb[5];
	for (i = 0; i < 5; i++)
	{
		countnum = 0;
		for (k = p + (i - 2)*width - 4; k< q + (i - 2)*width + 4; k++)
		{
			numone = counttworgb(k, k + 1);
			if (countnum >= 2 && numone>thresholdvalue)
			{
				numtwo = counttworgb(q, k);
				if (numtwo <150)
				{
					backture[i] = 1;
					backrgb[i] = k;
				}
				break;
			}
			if (countnum>0)
			{
				if (counttworgb(k, k + 1)<150)
					countnum++;
				else
					break;
			}
			if (countnum == 0 && numone>thresholdvalue)
			{
				numtwo = counttworgb(p + 1, k + 1);
				if (numtwo < 150)
				{
					frontture[i] = 1;
					frontrgb[i] = k;
					countnum = 1;
				}
			}

		}
	}
	for (i = 0; i < 3; i++)
	{
		numthree = frontture[i] + frontture[i + 1] + frontture[i + 2];
		numfour = backture[i] + backture[i + 1] + backture[i + 2];
		if (numthree == 3 && numfour == 3)
		{
			break;
		}
	}
	if (i < 3)
	{
		for (j = i; j < i + 2; j++)
		{
			numfive = (frontrgb[j] + width) - backrgb[j + 1];
			numsix = frontrgb[j + 1] - (backrgb[j] + width);
			if (numfive >= 1 || numsix >= 1)
			{
				cotinuous = 0;
				break;
			}
		}
	}
	if (i < 3 && cotinuous == 1 && p == frontrgb[2])
	{
		k = rgbregister + cimagespot;
		if (cimagespot == 0)
		{
			k->rgbBlue = (frontrgb[i] + 1)->rgbBlue;
			k->rgbGreen = (frontrgb[i] + 1)->rgbGreen;
			k->rgbRed = (frontrgb[i] + 1)->rgbRed;
			cout << k->rgbBlue << "   " << k->rgbGreen << "   " << k->rgbRed << endl;
			k++;
			cimagespot++;
		}
		if (cimagespot != 0)
		{
			for (j = i; j < i + 3; j++)
			{
				for (r = frontrgb[j] + 1; r < backrgb[j] + 1; r++)
				{
					for (s = k - 1;; s--)
					{
						if (s == rgbregister && (counttworgb(r, s)) >40)
						{
							k->rgbBlue = r->rgbBlue;
							k->rgbGreen = r->rgbGreen;
							k->rgbRed = r->rgbRed;
							cout << k->rgbBlue << "   " << k->rgbGreen << "   " << k->rgbRed << endl;
							k++;
							cimagespot++;
							break;
						}
						if ((counttworgb(r, s)) < 40)
							break;
					}
				}
			}
		}
		for (j = i; j < i + 3; j++)
		{
			countditance[backrgb[j] - frontrgb[j]]++;
		}
	}
	return cimagespot;
}
int choosergbspot(int beginheight, int width, int cimagespot, int thresholdvalue)
{
	int num, countnum, i, cnumberone;
	imagergb  p, q;
	cnumberone = 0;
	for (i = 0, p = rgb + beginheight*width + 1, q = rgbregister + cimagespot; i<width - 3; p++, i++)
	{
		//outputrgb(p, width);
		num = counttworgb(p, p + 1);
		if ((cnumberone >= 2) && (num>thresholdvalue))
		{
			cimagespot = judgeaddrgbspot(p - cnumberone, p, width, thresholdvalue, cimagespot);
			cnumberone = 0;
			p = p++;
			i++;
			//outputrgb(p, width);
			p = p++;
			i++;
			//outputrgb(p, width);
		}
		if (cnumberone != 0)
		{
			if (num>150)
			{
				cnumberone = 0;
				p = p++;
				i++;
				//outputrgb(p, width);
			}
			else
				cnumberone++;
		}
		num = counttworgb(p, p + 1);
		countnum = counttworgb(p + 1, backgroundrgb);
		if ((cnumberone == 0) && (num>thresholdvalue) && (countnum>200))
			cnumberone = 1;
	}
	return cimagespot;
}
void pretreatmentimage()
{


	imagergb  p, q;
	int  countnum, beginheight, overheight, cimagespot = 0, thresholdvalue, allblackline;
	int intervalquantity[4] = { 0, 0, 0, 0 };
	int i, j;

	Bitmap^ originalbm = gcnew Bitmap("4.bmp");

	int width = originalbm->Width;
	int height = originalbm->Height;
	Bitmap^ modifybm = gcnew Bitmap(width, height);

	rgb = (imagergb)malloc((width*height)*sizeof(RGBQUADS));
	backgroundrgb = (imagergb)malloc((1)*sizeof(RGBQUADS));

	for (i = 0; i <height; i++)
	{
		for (j = 0, p = rgb + i*width; j < width; j++, p++)
		{
			Color c = originalbm->GetPixel(j, i);
			p->rgbBlue = c.B;
			p->rgbGreen = c.G;
			p->rgbRed = c.R;
		}
	}


	for (i = 0, p = rgb + width*(height - 2); i < width - 3; p++, i++)
	{
		countnum = counttworgb(p, p + 1) + counttworgb(p + 1, p + 2) + counttworgb(p + 2, p + 3);
		if (countnum < 100)
		{
			backgroundrgb->rgbBlue = (p + 1)->rgbBlue;
			backgroundrgb->rgbGreen = (p + 1)->rgbGreen;
			backgroundrgb->rgbRed = (p + 1)->rgbRed;
			break;
		}
	}
	for (i = 0, p = rgb + (height / 2)* width + 1; i < width - 3; p++, i++)
	{
		if (counttworgb(p, p + 1)>250)
			intervalquantity[0]++;
		if (counttworgb(p, p + 1)>200)
			intervalquantity[1]++;
		if (counttworgb(p, p + 1)>150)
			intervalquantity[2]++;
		if (counttworgb(p, p + 1)>100)
			intervalquantity[3]++;
	}

	for (i = 3; i >= 0; i--)
	{
		if (intervalquantity[i]>7 && intervalquantity[i]<20)
		{
			thresholdvalue = 250 - i * 50;
			break;
		}
	}
	rgbregister = (imagergb)malloc((100)*sizeof(RGBQUADS));
	beginheight = height/10;
	overheight = height*9/10;
	for (i = beginheight; i <= overheight; i = i + 2)
	{
		cimagespot = choosergbspot(i, width, cimagespot, thresholdvalue);
	}
	for (p = rgb, i = 0; i < width*height; p++, i++)
	{
		for (q = rgbregister, j = 0; j < cimagespot; q++, j++)
		{

			if ((counttworgb(p, q)) <= 50)
			{
				p->rgbBlue = 255;
				p->rgbGreen = 255;
				p->rgbRed = 255;

				break;
			}
		}
		if ((cimagespot == j) && ((counttworgb(p, q - 1)) > 50))
		{
			p->rgbBlue = 0;
			p->rgbGreen = 0;
			p->rgbRed = 0;

		}
	}
	discardframe(width, height);
	allblackline = countnoisespots(width, height);
	if (allblackline < (width / 3))
	{
		discardnoise(width, height);
	}
	for (i = 0; i <height; i++)
	{
		for (j = 0, p = rgb + i*width; j < width; j++, p++)
		{
			modifybm->SetPixel(j, i, Color::FromArgb(p->rgbRed, p->rgbGreen, p->rgbBlue));
		}
	}
	modifybm->Save("处理图.bmp");
}

int main()
{
	pretreatmentimage();
	system("pause");
	return 0;
}

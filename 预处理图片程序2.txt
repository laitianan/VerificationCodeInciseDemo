#include<stdio.h>
#include<malloc.h>  
#include<string.h> 
#include<math.h>
#include<stdlib.h>
#include<iostream>  
#include <windows.h> 
using namespace std;

#pragma pack(2)

/*定义WORD为两个字节的类型*/
typedef unsigned short WORD;
/*定义DWORD为e四个字节的类型*/
typedef unsigned long DWORD;

/*位图文件头*/
typedef struct BMP_FILE_HEADER
{
	WORD bType;             /*  文件标识符          */
	DWORD bSize;            /*  文件的大小          */
	WORD bReserved1;        /*  保留值,必须设置为0  */
	WORD bReserved2;        /*  保留值,必须设置为0  */
	DWORD bOffset;          /*  文件头的最后到图像数据位开始的偏移量    */
} BMPFILEHEADER;

/*位图信息头*/
typedef struct BMP_INFO
{
	DWORD bInfoSize;       /*  信息头的大小             */
	DWORD bWidth;          /*  图像的宽度               */
	DWORD bHeight;         /*  图像的高度               */
	WORD bPlanes;          /*  图像的位面数             */
	WORD bBitCount;        /*  每个像素的位数           */
	DWORD bCompression;    /*  压缩类型                 */
	DWORD bmpImageSize;    /*  图像的大小,以字节为单位  */
	DWORD bXPelsPerMeter;  /*  水平分辨率               */
	DWORD bYPelsPerMeter;  /*  垂直分辨率               */
	DWORD bClrUsed;        /*  使用的色彩数             */
	DWORD bClrImportant;   /*  重要的颜色数             */
} BMPINF;

/*彩色表*/
typedef struct RGB_QUAD
{
	int rgbBlue;         /*  蓝色强度  */
	int rgbGreen;        /*  绿色强度  */
	int rgbRed;          /*  红色强度  */
	int rgbReversed;     /*  保留值    */
} RGBQUADS, *imagergb;
void pretreatmentimage()
{
	FILE  *ifp, *ofp;
	BMPFILEHEADER fileHeader;
	BMPINF infoHeader;
	imagergb rgb, p;
	int num;
	long offset, bmpImageSize, width, height, bytesPerPixel, size, bitCount;
	//WORD c;
	int i = 0;
	fopen_s(&ifp, "1.bmp", "rb");
	if (ifp == NULL)
	{
		printf("图片不存在!\n");
		return;
	}
	fopen_s(&ofp, "处理图.bmp", "wb");
	fseek(ifp, 0, 0);
	fread(&fileHeader, sizeof(fileHeader), 1, ifp);
	fread(&infoHeader, sizeof(infoHeader), 1, ifp);
	//计算并输出位图数据的偏移量，图像的大小，宽度和高度，每个像素点所占的字节
	size = fileHeader.bSize;
	offset = fileHeader.bOffset;
	bmpImageSize = infoHeader.bmpImageSize;
	width = infoHeader.bWidth;
	height = infoHeader.bHeight;
	bitCount = infoHeader.bBitCount;
	bytesPerPixel = infoHeader.bBitCount / 8;

	printf("%d %d %d %d %d %d\n", size, offset, bmpImageSize, width, height, bitCount, bytesPerPixel);
	rgb = (imagergb)malloc((width*height)*sizeof(RGBQUADS));
	p = rgb;
	fseek(ifp, 0, 0);
	fseek(ofp, 0, 0);
	for (i = 0; i < 54; i++)
	{
		num = fgetc(ifp);
		fputc(num, ofp);
	}
	for (i = 0; i<width*height; i++)
	{
		p->rgbBlue = fgetc(ifp);
		p->rgbGreen = fgetc(ifp);
		p->rgbRed = fgetc(ifp);
		//	p->rgbReversed=fgetc(ifp);
		if ((p->rgbBlue + p->rgbGreen + p->rgbRed) < 100)
		{
		p->rgbBlue = 0;
		p->rgbGreen = 0;
		p->rgbRed = 0;
		}
		else
		{
		p->rgbBlue = 255;
		p->rgbGreen = 255;
		p->rgbRed = 255;
		}

		fputc(p->rgbBlue, ofp);
		fputc(p->rgbGreen, ofp);
		fputc(p->rgbRed, ofp);
		p = p + 1;
	}
	while (!feof(ifp))
	{
		fputc(fgetc(ifp), ofp);
	}

	fclose(ifp);
	fclose(ofp);
}
int main()
{
	pretreatmentimage();
	return 0;
}

